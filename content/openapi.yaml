openapi: 3.0.0
info:
  title: My Awesome API
  description: A more comprehensive API demonstrating OpenAPI specification
  version: 1.1.0
servers:
  - url: https://your-api-domain.com/api/v1
paths:
  /users:
    get:
      summary: Get a list of users
      description: Retrieves a paginated list of users.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized access
      parameters:
        - in: query
          name: page
          description: Page number (optional)
          schema:
            type: integer
            minimum: 1
        - in: query
          name: limit
          description: Number of users per page (optional)
          schema:
            type: integer
            minimum: 1
            maximum: 100
    post:
      summary: Create a new user
      description: Creates a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request (invalid user data)
  /users/{userId}:
    get:
      summary: Get details of a specific user
      description: Retrieves information about a user by their ID.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      parameters:
        - in: path
          name: userId
          description: ID of the user
          required: true
          schema:
            type: string
  /posts:
    get:
      summary: Get a list of posts
      description: Retrieves a paginated list of posts.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized access
      parameters:
        - in: query
          name: page
          description: Page number (optional)
          schema:
            type: integer
            minimum: 1
        - in: query
          name: limit
          description: Number of posts per page (optional)
          schema:
            type: integer
            minimum: 1
            maximum: 100
  /posts/{postId}:
    get:
      summary: Get details of a specific post
      description: Retrieves information about a post by its ID.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    put:
      summary: Update a post
      description: Updates an existing post in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request (invalid post data)
        '404':
          description: Post not found
  /comments:
    post:
      summary: Create a new comment
      description: Creates a new comment for a specific post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
